;reg;reg_to_mem;8bitnum;16bitnum;16bitnum_to_mem;relative8bitnum
;specialは　(lambda (bins pos ostr) &body body)で

(in-package z80disas)

(defstruct (mnemonic (:conc-name mn-))
  (opcode "")
  (type nil)
  (operand nil)
  (len 1)
  (special nil))


;数値->ニーモニック変換表
(defparameter *optable*
  (vector
   (make-mnemonic :opcode "NOP" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 16BITNUM) :operand '("BC") :len 3)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("BC" "A") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("BC") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 8BITNUM) :operand '("B") :len 2)
   (make-mnemonic :opcode "RLCA" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "LD" :type '(16BITNUM_TO_MEM REG) :operand '("SP") :len 3)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("HL" "BC") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("A" "BC") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("BC") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 8BITNUM) :operand '("C") :len 2)
   (make-mnemonic :opcode "RRCA" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "STOP" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 16BITNUM) :operand '("DE") :len 3)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("DE" "A") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("DE") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 8BITNUM) :operand '("D") :len 2)
   (make-mnemonic :opcode "RLA" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "JR" :type '(RELATIVE8BITNUM) :operand NIL :len 2)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("HL" "DE") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("A" "DE") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("DE") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 8BITNUM) :operand '("E") :len 2)
   (make-mnemonic :opcode "RRA" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "JR" :type '(REG RELATIVE8BITNUM) :operand '("NZ") :len 2)
   (make-mnemonic :opcode "LD" :type '(REG 16BITNUM) :operand '("HL") :len 3)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL++" "A") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("HL") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 8BITNUM) :operand '("H") :len 2)
   (make-mnemonic :opcode "DAA" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "JR" :type '(REG RELATIVE8BITNUM) :operand '("Z") :len 2)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("HL" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("A" "HL++") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("HL") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 8BITNUM) :operand '("L") :len 2)
   (make-mnemonic :opcode "CPL" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "JR" :type '(REG RELATIVE8BITNUM) :operand '("NC") :len 2)
   (make-mnemonic :opcode "LD" :type '(REG 16BITNUM) :operand '("SP") :len 3)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL--" "A") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("SP") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM 8BITNUM) :operand '("HL") :len 2)
   (make-mnemonic :opcode "SCF" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "JR" :type '(REG RELATIVE8BITNUM) :operand '("C") :len 2)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("HL" "SP") :len 1)
   (make-mnemonic :opcode "LDD" :type '(REG REG_TO_MEM) :operand '("A" "HL--") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("SP") :len 1)
   (make-mnemonic :opcode "INC" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "DEC" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 8BITNUM) :operand '("A") :len 2)
   (make-mnemonic :opcode "CCF" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("B" "B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("B" "C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("B" "D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("B" "E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("B" "H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("B" "L") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("B" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("B" "A") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("C" "B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("C" "C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("C" "D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("C" "E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("C" "H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("C" "L") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("C" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("C" "A") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("D" "B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("D" "C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("D" "D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("D" "E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("D" "H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("D" "L") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("D" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("D" "A") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("E" "B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("E" "C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("E" "D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("E" "E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("E" "H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("E" "L") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("E" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("E" "A") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("H" "B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("H" "C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("H" "D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("H" "E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("H" "H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("H" "L") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("H" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("H" "A") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("L" "B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("L" "C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("L" "D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("L" "E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("L" "H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("L" "L") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("L" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("L" "A") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL" "B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL" "C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL" "D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL" "E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL" "H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL" "L") :len 1)
   (make-mnemonic :opcode "HALT" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("HL" "A") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("A" "B") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("A" "C") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("A" "D") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("A" "E") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("A" "H") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("A" "L") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("A" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("A" "A") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("A" "B") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("A" "C") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("A" "D") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("A" "E") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("A" "H") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("A" "L") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG REG_TO_MEM) :operand '("A" "HL") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG REG) :operand '("A" "A") :len 1)
   (make-mnemonic :opcode "ADC" :type '(REG REG) :operand '("A" "B") :len 1)
   (make-mnemonic :opcode "ADC" :type '(REG REG) :operand '("A" "C") :len 1)
   (make-mnemonic :opcode "ADC" :type '(REG REG) :operand '("A" "D") :len 1)
   (make-mnemonic :opcode "ADC" :type '(REG REG) :operand '("A" "E") :len 1)
   (make-mnemonic :opcode "ADC" :type '(REG REG) :operand '("A" "H") :len 1)
   (make-mnemonic :opcode "ADC" :type '(REG REG) :operand '("A" "L") :len 1)
   (make-mnemonic :opcode "ADC" :type '(REG REG_TO_MEM) :operand '("A" "HL") :len 1)
   (make-mnemonic :opcode "ADC" :type '(REG REG) :operand '("A" "A") :len 1)
   (make-mnemonic :opcode "SUB" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "SUB" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "SUB" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "SUB" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "SUB" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "SUB" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "SUB" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "SUB" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG REG) :operand '("A" "B") :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG REG) :operand '("A" "C") :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG REG) :operand '("A" "D") :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG REG) :operand '("A" "E") :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG REG) :operand '("A" "H") :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG REG) :operand '("A" "L") :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG REG_TO_MEM) :operand '("A" "HL") :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG REG) :operand '("A" "A") :len 1)
   (make-mnemonic :opcode "AND" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "AND" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "AND" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "AND" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "AND" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "AND" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "AND" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "AND" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "XOR" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "XOR" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "XOR" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "XOR" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "XOR" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "XOR" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "XOR" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "XOR" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "OR" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "OR" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "OR" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "OR" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "OR" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "OR" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "OR" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "OR" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "CP" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "CP" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "CP" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "CP" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "CP" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "CP" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "CP" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "CP" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "RET" :type '(REG) :operand '("NZ") :len 1)
   (make-mnemonic :opcode "POP" :type '(REG) :operand '("BC") :len 1)
   (make-mnemonic :opcode "JP" :type '(REG 16BITNUM) :operand '("NZ") :len 3)
   (make-mnemonic :opcode "JP" :type '(16BITNUM) :operand NIL :len 3)
   (make-mnemonic :opcode "CALL" :type '(REG 16BITNUM) :operand '("NZ") :len 3)
   (make-mnemonic :opcode "PUSH" :type '(REG) :operand '("BC") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG 8BITNUM) :operand '("A") :len 2)
   (make-mnemonic :opcode "RST" :type '(REG) :operand '("00H") :len 1)
   (make-mnemonic :opcode "RET" :type '(REG) :operand '("Z") :len 1)
   (make-mnemonic :opcode "RET" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "JP" :type '(REG 16BITNUM) :operand '("Z") :len 3)
   (make-mnemonic :opcode "SWAP" :type '(8BITNUM) :operand NIL :len 2)
   (make-mnemonic :opcode "CALL" :type '(REG 16BITNUM) :operand '("Z") :len 3)
   (make-mnemonic :opcode "CALL" :type '(16BITNUM) :operand NIL :len 3 :special
		  #'(lambda (bins pos ostr)
		      (format ostr "CALL  ~2,'0x~2,'0x" (third bins) (second bins))
		      (let* ((num (+ (* (third bins) #x100) (second bins)))
			     (txt (cdr (assoc num description-lst :test #'=))))
			(when txt
			  (format ostr "    //~A" txt)))))
   (make-mnemonic :opcode "ADC" :type '(REG 8BITNUM) :operand '("A") :len 2)
   (make-mnemonic :opcode "RST" :type '(REG) :operand '("08H") :len 1)
   (make-mnemonic :opcode "RET" :type '(REG) :operand '("NC") :len 1)
   (make-mnemonic :opcode "POP" :type '(REG) :operand '("DE") :len 1)
   (make-mnemonic :opcode "JP" :type '(REG 16BITNUM) :operand '("NC") :len 3)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "CALL" :type '(REG 16BITNUM) :operand '("NC") :len 3)
   (make-mnemonic :opcode "PUSH" :type '(REG) :operand '("DE") :len 1)
   (make-mnemonic :opcode "SUB" :type '(8BITNUM) :operand NIL :len 2)
   (make-mnemonic :opcode "RST" :type '(REG) :operand '("10H") :len 1)
   (make-mnemonic :opcode "RET" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "RETI" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "JP" :type '(REG 16BITNUM) :operand '("C") :len 3)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "CALL" :type '(REG 16BITNUM) :operand '("C") :len 3)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "SBC" :type '(REG 8BITNUM) :operand '("A") :len 2)
   (make-mnemonic :opcode "RST" :type '(REG) :operand '("18H") :len 1)
   (make-mnemonic :opcode "LDH" :type NIL :operand NIL :len 2 :special
		  #'(lambda (bins pos ostr)
		      (format ostr "LD  (FF00+~x),A" (second bins))))
   (make-mnemonic :opcode "POP" :type '(REG) :operand '("HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG_TO_MEM REG) :operand '("FF00+C" "A") :len 1)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "PUSH" :type '(REG) :operand '("HL") :len 1)
   (make-mnemonic :opcode "AND" :type '(8BITNUM) :operand NIL :len 2)
   (make-mnemonic :opcode "RST" :type '(REG) :operand '("20H") :len 1)
   (make-mnemonic :opcode "ADD" :type '(REG RELATIVE8BITNUM) :operand '("SP") :len 2)
   (make-mnemonic :opcode "JP" :type '(REG) :operand '("HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(16BITNUM_TO_MEM REG) :operand '("A") :len 3)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "XOR" :type '(8BITNUM) :operand NIL :len 2)
   (make-mnemonic :opcode "RST" :type '(REG) :operand '("28H") :len 1)
   (make-mnemonic :opcode "LDH" :type NIL :operand NIL :len 2 :special
		  #'(lambda (bins pos ostr)
		      (format ostr "LD  A,(FF00+~x)" (second bins))))
   (make-mnemonic :opcode "POP" :type '(REG) :operand '("AF") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG REG_TO_MEM) :operand '("A" "FF00+C") :len 1)
   (make-mnemonic :opcode "DI" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "PUSH" :type '(REG) :operand '("AF") :len 1)
   (make-mnemonic :opcode "OR" :type '(8BITNUM) :operand NIL :len 2)
   (make-mnemonic :opcode "RST" :type '(REG) :operand '("30H") :len 1)
   (make-mnemonic :opcode "LDHL" :type NIL :operand NIL :len 2 :special
		  #'(lambda (bins pos ostr)
		      (princ "LD  HL,SP" ostr)
		      (prinhex (second bins) 2 ostr t)))
   (make-mnemonic :opcode "LD" :type '(REG REG) :operand '("SP" "HL") :len 1)
   (make-mnemonic :opcode "LD" :type '(REG 16BITNUM_TO_MEM) :operand '("A") :len 3)
   (make-mnemonic :opcode "EI" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "[undef]" :type NIL :operand NIL :len 1)
   (make-mnemonic :opcode "CP" :type '(8BITNUM) :operand NIL :len 2)
   (make-mnemonic :opcode "RST" :type '(REG) :operand '("38H") :len 1)
   ))


(defparameter *optable-cb*
  (vector
   (make-mnemonic :opcode "RLC" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "RLC" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "RLC" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "RLC" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "RLC" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "RLC" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "RLC" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "RLC" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "RRC" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "RRC" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "RRC" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "RRC" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "RRC" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "RRC" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "RRC" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "RRC" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "RL" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "RL" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "RL" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "RL" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "RL" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "RL" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "RL" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "RL" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "RR" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "RR" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "RR" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "RR" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "RR" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "RR" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "RR" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "RR" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "SLA" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "SLA" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "SLA" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "SLA" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "SLA" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "SLA" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "SLA" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "SLA" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "SRA" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "SRA" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "SRA" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "SRA" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "SRA" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "SRA" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "SRA" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "SRA" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "SWAP" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "SWAP" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "SWAP" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "SWAP" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "SWAP" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "SWAP" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "SWAP" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "SWAP" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "SRL" :type '(REG) :operand '("B") :len 1)
   (make-mnemonic :opcode "SRL" :type '(REG) :operand '("C") :len 1)
   (make-mnemonic :opcode "SRL" :type '(REG) :operand '("D") :len 1)
   (make-mnemonic :opcode "SRL" :type '(REG) :operand '("E") :len 1)
   (make-mnemonic :opcode "SRL" :type '(REG) :operand '("H") :len 1)
   (make-mnemonic :opcode "SRL" :type '(REG) :operand '("L") :len 1)
   (make-mnemonic :opcode "SRL" :type '(REG_TO_MEM) :operand '("HL") :len 1)
   (make-mnemonic :opcode "SRL" :type '(REG) :operand '("A") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("0" "B") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("0" "C") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("0" "D") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("0" "E") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("0" "H") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("0" "L") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG_TO_MEM) :operand '("0" "HL") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("0" "A") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("1" "B") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("1" "C") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("1" "D") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("1" "E") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("1" "H") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("1" "L") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG_TO_MEM) :operand '("1" "HL") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("1" "A") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("2" "B") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("2" "C") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("2" "D") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("2" "E") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("2" "H") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("2" "L") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG_TO_MEM) :operand '("2" "HL") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("2" "A") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("3" "B") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("3" "C") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("3" "D") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("3" "E") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("3" "H") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("3" "L") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG_TO_MEM) :operand '("3" "HL") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("3" "A") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("4" "B") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("4" "C") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("4" "D") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("4" "E") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("4" "H") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("4" "L") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG_TO_MEM) :operand '("4" "HL") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("4" "A") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("5" "B") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("5" "C") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("5" "D") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("5" "E") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("5" "H") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("5" "L") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG_TO_MEM) :operand '("5" "HL") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("5" "A") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("6" "B") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("6" "C") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("6" "D") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("6" "E") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("6" "H") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("6" "L") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG_TO_MEM) :operand '("6" "HL") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("6" "A") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("7" "B") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("7" "C") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("7" "D") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("7" "E") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("7" "H") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("7" "L") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG_TO_MEM) :operand '("7" "HL") :len 1)
   (make-mnemonic :opcode "BIT" :type '(REG REG) :operand '("7" "A") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("0" "B") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("0" "C") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("0" "D") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("0" "E") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("0" "H") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("0" "L") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG_TO_MEM) :operand '("0" "HL") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("0" "A") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("1" "B") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("1" "C") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("1" "D") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("1" "E") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("1" "H") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("1" "L") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG_TO_MEM) :operand '("1" "HL") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("1" "A") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("2" "B") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("2" "C") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("2" "D") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("2" "E") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("2" "H") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("2" "L") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG_TO_MEM) :operand '("2" "HL") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("2" "A") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("3" "B") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("3" "C") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("3" "D") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("3" "E") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("3" "H") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("3" "L") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG_TO_MEM) :operand '("3" "HL") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("3" "A") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("4" "B") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("4" "C") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("4" "D") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("4" "E") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("4" "H") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("4" "L") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG_TO_MEM) :operand '("4" "HL") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("4" "A") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("5" "B") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("5" "C") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("5" "D") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("5" "E") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("5" "H") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("5" "L") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG_TO_MEM) :operand '("5" "HL") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("5" "A") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("6" "B") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("6" "C") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("6" "D") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("6" "E") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("6" "H") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("6" "L") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG_TO_MEM) :operand '("6" "HL") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("6" "A") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("7" "B") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("7" "C") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("7" "D") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("7" "E") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("7" "H") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("7" "L") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG_TO_MEM) :operand '("7" "HL") :len 1)
   (make-mnemonic :opcode "RES" :type '(REG REG) :operand '("7" "A") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("0" "B") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("0" "C") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("0" "D") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("0" "E") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("0" "H") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("0" "L") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG_TO_MEM) :operand '("0" "HL") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("0" "A") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("1" "B") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("1" "C") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("1" "D") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("1" "E") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("1" "H") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("1" "L") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG_TO_MEM) :operand '("1" "HL") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("1" "A") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("2" "B") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("2" "C") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("2" "D") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("2" "E") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("2" "H") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("2" "L") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG_TO_MEM) :operand '("2" "HL") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("2" "A") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("3" "B") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("3" "C") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("3" "D") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("3" "E") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("3" "H") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("3" "L") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG_TO_MEM) :operand '("3" "HL") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("3" "A") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("4" "B") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("4" "C") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("4" "D") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("4" "E") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("4" "H") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("4" "L") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG_TO_MEM) :operand '("4" "HL") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("4" "A") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("5" "B") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("5" "C") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("5" "D") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("5" "E") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("5" "H") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("5" "L") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG_TO_MEM) :operand '("5" "HL") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("5" "A") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("6" "B") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("6" "C") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("6" "D") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("6" "E") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("6" "H") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("6" "L") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG_TO_MEM) :operand '("6" "HL") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("6" "A") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("7" "B") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("7" "C") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("7" "D") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("7" "E") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("7" "H") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("7" "L") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG_TO_MEM) :operand '("7" "HL") :len 1)
   (make-mnemonic :opcode "SET" :type '(REG REG) :operand '("7" "A") :len 1)
   ))

(defun list-to-mn (lst)
  (let ((mn (ltm (cdr lst))))
    (setf (mn-opcode mn) (car lst))
    mn))

(defun ltm (lst)
  (let ((st (car lst)))
    (cond ((null st) (make-mnemonic))
	  ((equal st "n")
	   (let ((m (ltm (cdr lst))))
	     (setf (mn-type m) (cons '8bitnum (mn-type m)))
	     (setf (mn-len m) (+ (mn-len m) 1))
	     m))
	  ((equal st "nn")
	   (let ((m (ltm (cdr lst))))
	     (setf (mn-type m) (cons '16bitnum (mn-type m)))
	     (setf (mn-len m) (+ (mn-len m) 2))
	     m))
	  ((equal st "(nn)")
	   (let ((m (ltm (cdr lst))))
	     (setf (mn-type m) (cons '16bitnum_to_mem (mn-type m)))
	     (setf (mn-len m) (+ (mn-len m) 2))
	     m))
	  ((equal st "e")
	   (let ((m (ltm (cdr lst))))
	     (setf (mn-type m) (cons 'relative8bitnum (mn-type m)))
	     (setf (mn-len m) (+ (mn-len m) 1))
	     m))
	  ((eql (char st 0) #\()
	   (let ((m (ltm (cdr lst))))
	     (setf (mn-type m) (cons 'reg_to_mem (mn-type m)))
	     (setf (mn-operand m) (cons (strip st) (mn-operand m)))
	     m))
	  (t
	   (let ((m (ltm (cdr lst))))
	     (setf (mn-type m) (cons 'reg (mn-type m)))
	     (setf (mn-operand m) (cons st (mn-operand m)))
	     m)))))


;ex.  (strip "asdfgh") => "sdfg"
(defun strip (st)
  (if (<= (length st) 1)
      (format *error-output* "strip:長さが2以上ないとだめ~%")
      (subseq st 1 (- (length st) 1))))

;ex. (split "ld a,b " '(#\  #\,)) => '("ld" "a" "b")
(defun split (st lst)
  (spl st lst (length st) 0))

(defun spl (st lst len pos)
  (do ((begin pos (+ begin 1)))
      ((or (= begin len)
	   (not (member (char st begin) lst)))
       (if (= begin len)
	   nil
	   (do ((end begin (+ end 1)))
	       ((or (= end len)
		    (member (char st end) lst))
		(if (= end len)
		    (cons (subseq st begin end) nil)
		    (cons (subseq st begin end) (spl st lst len end)))))))))


(defun display-mnemonic (mn)
  (format t "(make-mnemonic :opcode ~s :type '~s :operand '~s :len ~s)~%"
	  (mn-opcode mn)
	  (mn-type mn)
	  (mn-operand mn)
	  (mn-len mn)))

;どこぞのアセンブラ表からニーモニックテーブルを作ろうと画策...
;LDH(2個)だけは特別に関数を作って表示することにする。
(defun make-optable (path)
  (with-open-file (str (parse-native-namestring path)
		       :direction :input)
    (do ((line (read-line str nil) (read-line str nil)))
	((null line))
      (display-mnemonic (list-to-mn (split line '(#\  #\,)))))))


